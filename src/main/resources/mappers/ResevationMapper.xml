<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.induk.cinema.repository.ReservationRepository">


    <select id="findAll" resultType="com.induk.cinema.domain.Reservation">
        select * from reservation
    </select>

    <select id="findById" parameterType="Long" resultType="com.induk.cinema.domain.Reservation">
        select * from reservation where id = #{id}
    </select>

    <insert id="save" useGeneratedKeys="true" keyProperty="id" parameterType="Reservation">
        insert into reservation(member_id, schedule_id, payment_id, adult, youth, date, status)
        values (#{member_id}, #{schedule_id}, #{payment_id}, #{adult}, #{youth}, #{date}, #{status})
    </insert>

    <update id="update" parameterType="Reservation">
        update reservation
        set member_id=#{member_id}, schedule_id=#{schedule_id}, payment_id=#{payment_id},
         adult=#{adult}, youth=#{youth}, date=#{date}, status=#{status},
        where id=#{id}
    </update>

    <delete id="delete" parameterType="Long">
        delete from reservation where id = #{id}
    </delete>

    <select id="findReservationByStatus" resultType="com.induk.cinema.domain.Reservation">
        SELECT reservation.*, movie.title as movie_title, genre.name as genre_name ,group_concat(seat.number) as seat_numbers ,
               theater.name as theater_name, cinema.name as cinema_name, schedule.start_time as schedule_start_time,
               schedule.end_time as schedule_end_time, payment.method as payment_method, payment.price as payment_price
            FROM reservation
            inner join schedule on reservation.schedule_id = schedule.id
            inner join movie on schedule.movie_id = movie.id
            inner join theater on schedule.theater_id = theater.id
            inner join cinema on theater.cinema_id = cinema.id
            inner join seat on theater.id = seat.theater_id
            inner join genre on movie.genre_id = genre.id
            inner join payment on reservation.payment_id = payment.id
        where reservation.member_id = #{memberId} and seat.reservation_id = reservation.id
        <if test="sort == 1">
            and schedule.end_time > #{searchDate} and reservation.status <![CDATA[<]]>= 1
            group by reservation.id
            order by reservation.status desc, schedule.start_time asc
        </if>
        <if test="sort == 2">
            and schedule.end_time <![CDATA[<]]>= #{searchDate} and reservation.status == 1
            group by reservation.id
            order by reservation.date desc
        </if>
    </select>

    <select id="countAll" resultType="int">
        select count(*) from reservation
    </select>

    <select id="findBySales" resultType="com.induk.cinema.dto.Sales" parameterType="java.util.HashMap">
        SELECT SUM(p.price) price, DATE_FORMAT(r.date, '%Y-%m') date
        FROM reservation r
        INNER JOIN schedule s ON s.id = r.schedule_id
        INNER JOIN movie m ON m.id = s.movie_id
        INNER JOIN payment p ON p.id = r.payment_id
        where m.id = #{movieId} and DATE_FORMAT(r.date, '%Y') = #{year}
        GROUP BY date
    </select>

    <select id="findByMoviesSale" resultType="com.induk.cinema.dto.MoviesSale" parameterType="java.util.HashMap">
        SELECT SUM(p.price) price, m.title
        FROM reservation r
        INNER JOIN schedule s ON s.id = r.schedule_id
        INNER JOIN movie m ON m.id = s.movie_id
        INNER JOIN payment p ON p.id = r.payment_id
        <![CDATA[
        where DATE_FORMAT(r.date, '%Y-%m') >= #{date1} and DATE_FORMAT(r.date, '%Y-%m') <= #{date2}
        ]]>
        GROUP BY m.title
    </select>
</mapper>
